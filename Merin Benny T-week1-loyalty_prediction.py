# -*- coding: utf-8 -*-
"""Loyalty Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m4XaRGV14egP10Br6VPkoZx4vx3qP7gq

# **Importing File Formats**
"""

# Importing libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/Electronic - Electronic.csv.csv')
df.head()

"""### **Checking Data Types**"""

data_types = df.dtypes
print(data_types)

df.shape

# to see all features and observations
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

df.head()

df.info()

df.describe()



"""##  Feature Abbreviations

● Age: Age of the customer

● Items Purchased: Number of items purchased in a single transaction

● Total Spent: Total amount spent on the transaction

● Discount (%): Percentage discount on the purchase

● Satisfaction Score: Self-reported customer satisfaction score

● Warranty Extension: Whether the customer opted for warranty extension

● Gender: Gender of the customer

● Region: Customer's region

● Product Category: Category of the purchased product

● Payment Method: Payment method used (e.g., UPI, Cash)

● Revenue: Total revenue from the customer

● Store Rating: Rating given by the customer to the store

● Loyalty Score: Customer's loyalty score

● Membership Status: Whether the customer is a member

● Preferred Visit Time: Preferred time of visit

**Types of Features**

Age: Numerical (Continuous)

Items Purchased: Numerical (Continuous)

Total Spent: Numerical (Continuous)

Discount (%): Numerical (Continuous)

Satisfaction Score: Numerical (Continuous)

Warranty Extension: Categorical (Numeric)

Gender: Categorical

Region: Categorical

Product Category: Categorical

Payment Method: Categorical

Revenue: Numerical (Continuous)

Store Rating: Numerical (Continuous)

Loyalty Score: Numerical (Continuous)

Membership Status: Categorical (Numeric)

Preferred Visit Time: Categorical

# **EDA**

# **Univariate analysis**

### **Numerical Columns**
"""

df1=df.copy()

import matplotlib.pyplot as plt
import seaborn as sns

# Set style for plots
sns.set(style="whitegrid")

# List of numerical and categorical columns
numerical_cols = ["Age", "Items Purchased", "Total Spent", "Discount (%)",
                  "Satisfaction Score", "Warranty Extension", "Revenue",
                  "Store Rating", "Loyalty Score", "Membership Status"]
# Univariate analysis for numerical variables
def univariate_numerical(df1, numerical_cols):
    plt.figure(figsize=(15, 20))
    for i, col in enumerate(numerical_cols, 1):
        plt.subplot(5, 2, i)
        sns.histplot(df[col], kde=True)
        plt.title(f'Distribution of {col}')
    plt.tight_layout()
    plt.show()
univariate_numerical(df, numerical_cols)

"""1. **Distribution of Age**: The age distribution appears uniform, with slight peaks around the ages of 40-50 and a decrease at the ends (20s and 70s).

2. **Distribution of Items Purchased**: The distribution is near-uniform with mild fluctuations. There are slight peaks at 6, 10, and 12 items purchased.

3.**Distribution of Total Spent**: Right-skewed distribution, with most spending concentrated below 300 units. There is a long tail extending towards 700 units.

4. **Distribution of Discount (%)**
The distribution starts high at lower discount levels (10%) and then rises again towards 50%, showing a U-shaped pattern.

5. **Distribution of Satisfaction Score**
Bimodal distribution with peaks at 1.0 and 5.0, and lower frequencies in between.

6. **Distribution of Warranty Extension**
Left-skewed with a peak at 0 (no warranty) and another smaller peak near 1 (full warranty extension).

7. **Distribution of Revenue**
 Right-skewed with a peak at lower revenue levels (around 500 units), tapering off towards higher revenues.

8. **Distribution of Store Rating**
Symmetrical, bell-shaped distribution centered around a rating of 4.0.

9. **Distribution of Loyalty Score**
Right-skewed distribution with a peak around 5-10, followed by a gradual decline.

10. **Distribution of Membership Status**
Bimodal distribution with peaks at 0 (non-members) and 1 (members).

### **Categorical columns**
"""

categorical_cols = ["Gender", "Region", "Product Category", "Payment Method",
                    "Preferred Visit Time"]
# Univariate analysis for categorical variables
def univariate_categorical(df1, categorical_cols):
    plt.figure(figsize=(15, 12))
    for i, col in enumerate(categorical_cols, 1):
        plt.subplot(3, 2, i)
        sns.countplot(data=df, x=col, palette="Set2")
        plt.title(f'Count of {col}')
        plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Perform univariate analysis
univariate_categorical(df, categorical_cols)

"""**Count of Gender:**

There is a fairly even distribution between male and female customers, with males being slightly more frequent.

**Count of Region:**

Customer distribution across regions (East, North, South, and West) is relatively balanced.
The South region has a slight edge in customer count, but the differences among regions are minimal.

**Count of Product Category:**

Product categories like Accessories, Laptop, Mobile, Tablet, and Television are almost equally popular among customers.

**Count of Payment Method:**

Payment methods are fairly evenly distributed among Cash, Credit Card, Debit Card, Net Banking, and UPI.
Net Banking and Cash are slightly more popular than other payment options,

### **Segment by Region**
"""

# Count customers per region
region_counts = df1['Region'].value_counts()

# Calculate average metrics per region
region_metrics = df1.groupby('Region').agg({
    'Total Spent': 'mean',
    'Loyalty Score': 'mean',
    'Satisfaction Score': 'mean'
}).reset_index()
region_metrics.columns = ['Region', 'Average Total Spent', 'Average Loyalty Score', 'Average Satisfaction Score']

# Visualize average metrics by region
region_metrics_melted = region_metrics.melt(id_vars='Region', var_name='Metric', value_name='Value')

plt.figure(figsize=(10, 6))
sns.barplot(data=region_metrics_melted, x='Region', y='Value', hue='Metric', palette='viridis')
plt.title('Average Metrics by Region', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Average Value', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.legend(title='Metric')
plt.show()

"""Total Spent:

The East and West regions have significantly higher average total spending compared to the North and South regions. This suggests that customers in these regions tend to spend more on average.
Loyalty Score:

The East, North, and South regions show similar average loyalty scores. However, the West region has a slightly lower average loyalty score. This might indicate that customers in the West region are less loyal compared to the other regions.
Satisfaction Score:

The East, North, and South regions have similar average satisfaction scores, while the West region has a slightly lower score. This aligns with the lower loyalty score observed in the West region.

### **Segment by Product Category**
"""

# Count customers per product category
category_counts = df1['Product Category'].value_counts()

# Calculate average metrics per product category
category_metrics = df1.groupby('Product Category').agg({
    'Revenue': 'mean',
    'Loyalty Score': 'mean',
    'Satisfaction Score': 'mean'
}).reset_index()

# Visualize average metrics by product category
category_metrics_melted = category_metrics.melt(id_vars='Product Category', var_name='Metric', value_name='Value')

plt.figure(figsize=(10, 6))
sns.barplot(data=category_metrics_melted, x='Product Category', y='Value', hue='Metric', palette='viridis')
plt.title('Average Metrics by Product Category', fontsize=16)
plt.xlabel('Product Category', fontsize=12)
plt.ylabel('Average Value', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.legend(title='Metric')
plt.xticks(rotation=45)
plt.show()

"""Revenue:

Television has the highest average revenue, followed by Mobile and Laptop. This suggests that these product categories are the main revenue drivers for the business.
Accessories and Tablet have significantly lower average revenue compared to the other categories.
Loyalty Score:

Laptop and Television have the highest average loyalty scores. This indicates that customers who purchase these products tend to be more loyal to the brand.
Accessories and Tablet have lower average loyalty scores, suggesting that customers in these categories might be less loyal.
Satisfaction Score:

Mobile and Television have the highest average satisfaction scores. This indicates that customers are generally more satisfied with these products.
Accessories and Tablet have lower average satisfaction scores, suggesting potential areas for improvement in product quality or customer experience.

### **Combine Region and Product Category Segmentation**
"""

# Group by Region and Product Category
region_category_metrics = df1.groupby(['Region', 'Product Category']).agg({
    'Total Spent': 'mean',
    'Revenue': 'mean',
    'Loyalty Score': 'mean'
}).reset_index()

# Visualize the cross-segmentation
plt.figure(figsize=(12, 6))
# The arguments to pivot should be passed as keyword arguments
sns.heatmap(region_category_metrics.pivot(index='Region', columns='Product Category', values='Revenue'),
            annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Average Revenue by Region and Product Category', fontsize=16)
plt.xlabel('Product Category', fontsize=12)
plt.ylabel('Region', fontsize=12)
plt.show()

"""# **Bivariate analysis**"""

numeric_columns = df1.select_dtypes(include=['number']).columns
categorical_columns = df1.select_dtypes(include=['object']).columns
numeric_columns

"""### **Loyalty Score vs age**"""

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df1, x='Age', y='Loyalty Score', color='skyblue', alpha=0.6, s=40)
plt.title('Scatter Plot: Loyalty Score vs Age', fontsize=16)
plt.xlabel('Age', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

age_bins = [18, 25, 35, 45, 55, 65, 75]
df1['Age Group'] = pd.cut(df1['Age'], bins=age_bins, labels=['18-24', '25-34', '35-44', '45-54', '55-64', '65-74'])

plt.figure(figsize=(10, 6))
sns.boxplot(data=df1, x='Age Group', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Age Group', fontsize=16)
plt.xlabel('Age Group', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""While the overall trend seems to be similar across age groups, there might be subtle differences in the distribution tails. For example, the 18-24 age group seems to have a slightly wider range of loyalty scores compared to older age groups.

The median loyalty score appears to be relatively consistent across all age groups, hovering around the 15-20 range. This suggests that, on average, customers in different age groups exhibit similar levels of loyalty.

### **Loyalty Score vs Items Purchased**
"""

# Scatter plot: Loyalty Score vs Items Purchased
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df1, x='Items Purchased', y='Loyalty Score', color='coral', alpha=0.6, s=40)
plt.title('Scatter Plot: Loyalty Score vs Items Purchased', fontsize=16)
plt.xlabel('Items Purchased', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Line plot of average Loyalty Score by Items Purchased
plt.figure(figsize=(10, 6))
items_loyalty_mean = df1.groupby('Items Purchased')['Loyalty Score'].mean()
sns.lineplot(x=items_loyalty_mean.index, y=items_loyalty_mean.values, color='green', marker='o')
plt.title('Average Loyalty Score by Items Purchased', fontsize=16)
plt.xlabel('Items Purchased', fontsize=12)
plt.ylabel('Average Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""Increasing Trend: The line plot exhibits a consistent upward trend, indicating that the relationship between items purchased and loyalty score is generally positive.
Steeper Slope: The slope of the line becomes steeper as the number of items purchased increases, suggesting that the impact of additional purchases on loyalty score becomes more pronounced.

### **Loyalty Score vs Total Spent**
"""

# Scatter plot: Loyalty Score vs Total Spent
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df1, x='Total Spent', y='Loyalty Score', color='skyblue', alpha=0.6, s=40)
plt.title('Scatter Plot: Loyalty Score vs Total Spent', fontsize=16)
plt.xlabel('Total Spent', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Box plot: Loyalty Score by Total Spent bins
# Creating bins for Total Spent
bins = [0, 100, 200, 300, 400, 500, 600, 700]
labels = ['0-100', '101-200', '201-300', '301-400', '401-500', '501-600', '601-700']
df1['Total Spent Group'] = pd.cut(df1['Total Spent'], bins=bins, labels=labels)

plt.figure(figsize=(10, 6))
sns.boxplot(data=df1, x='Total Spent Group', y='Loyalty Score', palette='coolwarm')
plt.title('Box Plot: Loyalty Score by Total Spent Group', fontsize=16)
plt.xlabel('Total Spent Group', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""The median loyalty score increases steadily across the total spent groups, indicating that customers who spend more tend to have higher overall loyalty.
Spread of Loyalty Scores: The interquartile range (IQR) of loyalty scores also tends to increase with higher spending. This suggests that while high-spending customers tend to be more loyal on average, there's also more variability in their loyalty levels.

### **Loyalty Score	vs Discount (%)**
"""

# Scatter plot: Loyalty Score vs Discount (%)
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df1, x='Discount (%)', y='Loyalty Score', color='teal', alpha=0.6, s=40)
plt.title('Scatter Plot: Loyalty Score vs Discount (%)', fontsize=16)
plt.xlabel('Discount (%)', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Box plot: Loyalty Score by Discount (%) bins
# Creating bins for Discount (%)
bins = [0, 10, 20, 30, 40, 50]
labels = ['0-10%', '11-20%', '21-30%', '31-40%', '41-50%']
df1['Discount Group'] = pd.cut(df1['Discount (%)'], bins=bins, labels=labels)

plt.figure(figsize=(10, 6))
sns.boxplot(data=df1, x='Discount Group', y='Loyalty Score', palette='coolwarm')
plt.title('Box Plot: Loyalty Score by Discount Group', fontsize=16)
plt.xlabel('Discount Group', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""Negative Correlation: The downward trend of the points indicates that higher discounts are associated with lower loyalty scores

The scatter in the data suggests that the relationship between discount and loyalty is not straightforward

The box plot suggests a weak negative correlation between the discount group and the loyalty score. As the discount group increases  the median loyalty score tends to decrease.

### **Loyalty Score	vs Satisfaction Score**
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df1, x='Satisfaction Score', y='Loyalty Score', color='purple', alpha=0.7, s=50)
plt.title('Scatter Plot: Loyalty Score vs Satisfaction Score', fontsize=16)
plt.xlabel('Satisfaction Score', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(True, linestyle='--', linewidth=0.5)
plt.show()

correlation_coefficient = df1['Loyalty Score'].corr(df1['Satisfaction Score'])
print(f"Correlation Coefficient: {correlation_coefficient}")

"""The box plot reveals a positive correlation between satisfaction score and loyalty score. As satisfaction score increases, the median loyalty score also tends to increase

Clustered Data: The data points are clustered around a general trend line, suggesting a strong relationship between the two variables.


Outliers: There are a few outliers present, which might represent customers with unusual behavior or extreme satisfaction/loyalty levels.

### **Loyalty Score	vs Warranty Extension**
"""

# Line plot of average Loyalty Score by Warranty Extension
plt.figure(figsize=(8, 5))
warranty_loyalty_mean = df1.groupby('Warranty Extension')['Loyalty Score'].mean()
sns.lineplot(x=warranty_loyalty_mean.index, y=warranty_loyalty_mean.values, color='blue', marker='o')
plt.title('Average Loyalty Score by Warranty Extension', fontsize=16)
plt.xlabel('Warranty Extension (0 = No, 1 = Yes)', fontsize=12)
plt.ylabel('Average Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Box plot: Loyalty Score by Warranty Extension
plt.figure(figsize=(8, 5))
sns.boxplot(data=df1, x='Warranty Extension', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Warranty Extension', fontsize=16)
plt.xlabel('Warranty Extension (0 = No, 1 = Yes)', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""The box plot suggests a positive correlation between warranty extension and loyalty score. The group with warranty extension (1) tends to have a higher median loyalty score compared to the group without warranty extension (0).

### **Loyalty vs Gender**
"""

plt.figure(figsize=(8, 6))
sns.boxplot(data=df1, x='Gender', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Gender', fontsize=16)
plt.xlabel('Gender', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Calculate the mean loyalty score for each gender
mean_loyalty_by_gender = df1.groupby('Gender')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Gender:\n{mean_loyalty_by_gender}")

# Calculate the median loyalty score for each gender
median_loyalty_by_gender = df1.groupby('Gender')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Gender:\n{median_loyalty_by_gender}")

"""Male, Female, and Other. The median loyalty score and the overall distribution of scores seem quite similar across all three groups.

### **Loyalty Score	vs Region**
"""

plt.figure(figsize=(10, 6))
sns.boxplot(data=df1, x='Region', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Region', fontsize=16)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Calculate the mean loyalty score for each region
mean_loyalty_by_region = df1.groupby('Region')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Region:\n{mean_loyalty_by_region}")

# Calculate the median loyalty score for each region
median_loyalty_by_region = df1.groupby('Region')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Region:\n{median_loyalty_by_region}")

"""Based on the box plot, there doesn't appear to be a significant difference in loyalty scores across the four regions (South, East, North, and West). The median loyalty score and the overall distribution of scores seem quite similar across all regions.

### **Product Category vs Loyalty Score**
"""

plt.figure(figsize=(12, 6))
sns.boxplot(data=df1, x='Product Category', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Product Category', fontsize=16)
plt.xlabel('Product Category', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.tight_layout() # Adjust layout to prevent labels from overlapping
plt.show()

# Calculate the mean loyalty score for each product category
mean_loyalty_by_category = df1.groupby('Product Category')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Product Category:\n{mean_loyalty_by_category}")

# Calculate the median loyalty score for each product category
median_loyalty_by_category = df1.groupby('Product Category')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Product Category:\n{median_loyalty_by_category}")

"""there doesn't appear to be a significant difference in loyalty scores across the five product categories (Accessories, Laptop, Tablet, Television, and Mobile). The median loyalty score and the overall distribution of scores seem quite similar across all categories

### **Payment Method vs Loyalty Score**
"""

plt.figure(figsize=(12, 6))
sns.boxplot(data=df1, x='Payment Method', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Payment Method', fontsize=16)
plt.xlabel('Payment Method', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.tight_layout() # Adjust layout to prevent labels from overlapping
plt.show()

# Calculate the mean loyalty score for each payment method
mean_loyalty_by_method = df1.groupby('Payment Method')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Payment Method:\n{mean_loyalty_by_method}")

# Calculate the median loyalty score for each payment method
median_loyalty_by_method = df1.groupby('Payment Method')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Payment Method:\n{median_loyalty_by_method}")

"""there doesn't appear to be a significant difference in loyalty scores across the five payment methods (UPI, Cash, Credit Card, Net Banking, and Debit Card). The median loyalty score and the overall distribution of scores seem quite similar across all payment methods.

### **Revenue vs Loyalty Score**
"""

# Scatter plot with regression line: Revenue vs Loyalty Score
plt.figure(figsize=(10, 6))
sns.regplot(data=df1, x='Revenue', y='Loyalty Score', scatter_kws={'alpha':0.5}, line_kws={'color':'red'})
plt.title('Scatter Plot with Regression Line: Revenue vs Loyalty Score', fontsize=16)
plt.xlabel('Revenue', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""The scatter plot with the regression line reveals a strong positive correlation between revenue and loyalty score. As revenue increases, the loyalty score also tends to increase.

### **Store Rating	vs Loyalty Score**
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df1, x='Store Rating', y='Loyalty Score', color='purple', alpha=0.6, s=40)
plt.title('Scatter Plot: Loyalty Score vs Store Rating', fontsize=16)
plt.xlabel('Store Rating', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Box plot: Loyalty Score by Store Rating bins
# Creating bins for Store Rating (example bins, adjust as needed)
bins = [1, 2, 3, 4, 5]
labels = ['1-2', '2-3', '3-4', '4-5']
df1['Store Rating Group'] = pd.cut(df1['Store Rating'], bins=bins, labels=labels, right=False)

plt.figure(figsize=(10, 6))
sns.boxplot(data=df1, x='Store Rating Group', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Store Rating Group', fontsize=16)
plt.xlabel('Store Rating Group', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Calculate the mean loyalty score for each store rating group
mean_loyalty_by_rating = df1.groupby('Store Rating Group')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Store Rating Group:\n{mean_loyalty_by_rating}")

# Calculate the median loyalty score for each store rating group
median_loyalty_by_rating = df1.groupby('Store Rating Group')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Store Rating Group:\n{median_loyalty_by_rating}")

"""The scatter plot shows a weak positive correlation between store rating and loyalty score

Median Loyalty Score: The median loyalty score increases as the store rating group increases. This indicates that, on average, customers tend to be more loyal to higher-rated stores.

### **Loyalty Score	vs Membership Status**
"""

plt.figure(figsize=(8, 6))
sns.boxplot(data=df1, x='Membership Status', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Membership Status', fontsize=16)
plt.xlabel('Membership Status', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

# Calculate the mean loyalty score for each membership status
mean_loyalty_by_membership = df1.groupby('Membership Status')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Membership Status:\n{mean_loyalty_by_membership}")

# Calculate the median loyalty score for each membership status
median_loyalty_by_membership = df1.groupby('Membership Status')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Membership Status:\n{median_loyalty_by_membership}")

"""there appears to be a slight positive correlation between membership status and loyalty score. The group with membership status 1 (presumably members) tends to have a slightly higher median loyalty score compared to the group without membership (0).

### **Preferred Visit Time vs Loyalty Score**
"""

plt.figure(figsize=(12, 6))
sns.boxplot(data=df1, x='Preferred Visit Time', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Preferred Visit Time', fontsize=16)
plt.xlabel('Preferred Visit Time', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()

# Calculate the mean loyalty score for each preferred visit time
mean_loyalty_by_time = df1.groupby('Preferred Visit Time')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Preferred Visit Time:\n{mean_loyalty_by_time}")

# Calculate the median loyalty score for each preferred visit time
median_loyalty_by_time = df1.groupby('Preferred Visit Time')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Preferred Visit Time:\n{median_loyalty_by_time}")

"""there doesn't appear to be a significant difference in loyalty scores across the three preferred visit times: Evening, Morning, and Afternoon. The median loyalty score and the overall distribution of scores seem quite similar across all groups.

### **Loyalty Score	 vs Age Group**
"""

plt.figure(figsize=(12, 6))
sns.boxplot(data=df1, x='Age Group', y='Loyalty Score', palette='pastel')
plt.title('Box Plot: Loyalty Score by Age Group', fontsize=16)
plt.xlabel('Age Group', fontsize=12)
plt.ylabel('Loyalty Score', fontsize=12)
plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.tight_layout()  # Adjust layout to prevent labels from overlapping
plt.show()

# Calculate the mean loyalty score for each age group
mean_loyalty_by_age = df1.groupby('Age Group')['Loyalty Score'].mean()
print(f"Mean Loyalty Score by Age Group:\n{mean_loyalty_by_age}")

# Calculate the median loyalty score for each age group
median_loyalty_by_age = df1.groupby('Age Group')['Loyalty Score'].median()
print(f"\nMedian Loyalty Score by Age Group:\n{median_loyalty_by_age}")

"""there doesn't appear to be a significant difference in loyalty scores across the different age groups. The median loyalty score and the overall distribution of scores seem quite similar across all age groups

### **Items Purchased vs Satisfaction Score**
"""

# Scatter Plot: Items Purchased vs Satisfaction Score
plt.figure(figsize=(10, 6))
sns.regplot(data=df1, x='Items Purchased', y='Satisfaction Score', scatter_kws={'alpha': 0.5}, line_kws={'color': 'red'})
plt.title('Items Purchased vs Satisfaction Score', fontsize=16)
plt.xlabel('Items Purchased', fontsize=12)
plt.ylabel('Satisfaction Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""The scatter plot, combined with the regression line, reveals a weak positive correlation between the number of items purchased and the satisfaction score. As the number of items purchased increases, there's a slight tendency for the satisfaction score to increase as well.

### **Total Spent vs Satisfaction Score**
"""

# Scatter Plot: Total Spent vs Satisfaction Score
plt.figure(figsize=(10, 6))
sns.regplot(data=df1, x='Total Spent', y='Satisfaction Score', scatter_kws={'alpha': 0.5}, line_kws={'color': 'blue'})
plt.title('Total Spent vs Satisfaction Score', fontsize=16)
plt.xlabel('Total Spent', fontsize=12)
plt.ylabel('Satisfaction Score', fontsize=12)
plt.grid(visible=True, linestyle='--', linewidth=0.5)
plt.show()

"""The scatter plot, combined with the regression line, reveals a weak positive correlation between the total amount spent and the satisfaction score. As the total amount spent increases, there's a slight tendency for the satisfaction score to increase as well. However, the relationship is not very strong, and there's considerable scatter in the data.

### Correlation
"""

# Select numerical columns
numerical_cols = df1.select_dtypes(include=['float64', 'int64']).columns

# Compute Pearson correlation for numerical columns
numerical_corr = df1[numerical_cols].corr(method='pearson')

# Plot the heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(numerical_corr, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Correlation Heatmap for Numerical Features', fontsize=16)
plt.show()

"""**Strong Positive Correlations**
Total Spent and Revenue:
Items Purchased and Total Spent
Satisfaction Score and Loyalty Score
**strong negative correlation**

Total Spent and Discount %
Satisfaction Score and Discount %

**A moderate positive correlation**

Items Purchased and Satisfaction Score
Warranty Extension and Revenue

# **Data Cleaning:**

## **Handle missing values**
"""

df.isnull().sum()

df.shape

df2=df.copy()

#filling categorical values
for column in ["Gender", "Payment Method", "Preferred Visit Time"]:
    df2[column].fillna(df2[column].mode()[0], inplace=True)

#filling store rating
df2["Store Rating"].fillna(df2["Store Rating"].mean(), inplace=True)

#filling membership status
df2["Membership Status"].fillna(df2["Membership Status"].median(), inplace=True)

df2.isnull().sum()

"""# **Outlier's**"""

for column in df2.select_dtypes(include=['float64', 'int64']).columns:
  plt.figure(figsize=(8, 6))
  sns.boxplot(y=df2[column])
  plt.title(f'Boxplot of {column} to detect outliers')
  plt.ylabel(column)
  plt.show()

from scipy.stats import zscore
numerical_columns = df2.select_dtypes(include=[np.number]).columns

# Calculate z-scores for numerical columns
z_scores = df2[numerical_columns].apply(zscore)

# Identify outliers (absolute z-score > 3)
outlier_counts_zscore = (z_scores.abs() > 3).sum()

# Display the count of outliers in each column based on z-score analysis
outlier_counts_zscore

from scipy.stats.mstats import winsorize

# Apply winsorization to all numerical columns
winsorized_data = df2.copy()  # Make a copy to store winsorized columns

# Define limits for winsorization (e.g., cap the bottom 1% and top 1%)
limits = (0.01, 0.01)

# Winsorize each numerical column
for column in numerical_columns:
    winsorized_data[column + "_winsorized"] = winsorize(winsorized_data[column], limits=limits)

# Display a sample of the original vs winsorized values for inspection
winsorized_sample = winsorized_data[[col + "_winsorized" for col in numerical_columns]].head()
winsorized_sample

for column in df2.select_dtypes(include=['float64', 'int64']).columns:
  plt.figure(figsize=(8, 6))
  sns.boxplot(y=df2[column])
  plt.title(f'Boxplot of {column} to detect outliers')
  plt.ylabel(column)
  plt.show()

from scipy.stats import zscore
numerical_columns = df2.select_dtypes(include=[np.number]).columns

# Calculate z-scores for numerical columns
z_scores = df2[numerical_columns].apply(zscore)

# Identify outliers (absolute z-score > 3)
outlier_counts_zscore = (z_scores.abs() > 3).sum()

# Display the count of outliers in each column based on z-score analysis
outlier_counts_zscore

df2['Region'] = df2['Region'].str.lower()
df2['Product Category'] = df2['Product Category'].str.lower()
df2['Gender'] = df2['Gender'].str.lower()
df2['Payment Method'] = df2['Payment Method'].str.lower()
df2['Preferred Visit Time'] = df2['Preferred Visit Time'].str.lower()
unique_values_region = df2['Region'].unique()
unique_values_product_category = df2['Product Category'].unique()

unique_values_region

unique_values_product_category

"""The data cleaning is complete:

Missing Values:
All missing values have been successfully handled.

Standardized Categorical Values:
Region values are standardized to lowercase: 'south', 'east', 'north', 'west'.
Product Category values are standardized to lowercase: 'accessories', 'laptop', 'tablet', 'television', 'mobile'.
"""

df2.head()

"""# **Scaling**"""

df3=df2.copy()

df3.head()

from sklearn.preprocessing import RobustScaler

exclude_columns = ['Age', 'Warranty Extension', 'Loyalty Score', 'Membership Status']

# Select numerical columns for scaling, excluding the specified columns
numerical_columns = [col for col in df3.columns if df2[col].dtype in ['float64', 'int64'] and col not in exclude_columns]

# Initialize RobustScaler
robust_scaler = RobustScaler()

# Fit and transform the selected numerical columns
df3[numerical_columns] = robust_scaler.fit_transform(df3[numerical_columns])

df3.head()

df3.shape

"""# **Encoding**"""

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer

categorical_columns = ['Region', 'Payment Method', 'Product Category', 'Preferred Visit Time','Gender']

encoder = OneHotEncoder(drop='first', sparse_output=False)

encoded_data = encoder.fit_transform(df3[categorical_columns])

encoded_df = pd.DataFrame(encoded_data, columns=encoder.get_feature_names_out(categorical_columns))
df3_encoded = pd.concat([df3.drop(columns=categorical_columns), encoded_df], axis=1)

df3_encoded.head()

df3_encoded.shape